{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\pages\\\\UserProf\\\\UserProf.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USERS } from '../../utils/queries';\nimport { updateUsers } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Alert from 'react-bootstrap/Alert';\nimport './UserProf.css';\n\nconst UserProf = () => {\n  // cache redux store\n  const state = useSelector(state => state); // destructure required variable\n\n  const {\n    users\n  } = state; // cache redux method to update store\n\n  const dispatch = useDispatch(); // get user id from url which was appended by Link\n\n  const {\n    id\n  } = useParams(); // initiate component level state to keep track of current user\n\n  const [curUser, setCurUser] = useState({});\n  const [showAlert, setShowAlert] = useState(false); // make db query to get all users, in case page is refreshed or user has not first visited landing page to initiate redux store from db\n\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_USERS); // this will be called after initial render and each time one of the values in the dependency array (users, data, loading, dispatch, id, curUser) changes. checking the redux store first\n\n  useEffect(() => {\n    // if users are already in global store\n    if (users.length) {\n      // update component level state of curUser to be the user object from the redux store whose id matches the one from the url\n      setCurUser(users.find(user => user._id === id));\n    } else if (data) {\n      // if nothing was in global store, if there is any data retrieved from db on server, dispatch the action to update the users in the global store with the data from the db\n      dispatch(updateUsers(data.users)); // also, cache the products from the db in indexedDb\n\n      data.users.forEach(user => {\n        idbPromise('users', 'put', user);\n      });\n    } else if (!loading) {\n      // otherwise, if there is nothing in the redux store, and there is no internet connection (hence 'loading' is undefined in the useQuery() hook) get all the data from the cache in idb\n      idbPromise('users', 'get').then(indexedUsers => {\n        // use data from indexedDb to update redux global store for offline browsing\n        dispatch(updateUsers(indexedUsers));\n      });\n    }\n  }, [users, data, loading, dispatch, id]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading ? /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    style: {\n      width: '75px',\n      height: '75px',\n      margin: 'auto',\n      marginTop: '6rem',\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 6\n    }\n  }, \"Loading...\")) : /*#__PURE__*/React.createElement(React.Fragment, null, curUser ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"UserProf vh-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"w-100 my-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }\n  }, curUser.username), /*#__PURE__*/React.createElement(Row, {\n    className: \"d-flex justify-content-center \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 5,\n    className: \"d-flex flex-column justify-content-start align-items-start mt-1 mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100 bskr-bg-secondary pt-2 mt-1 mb-3 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"w-75 mx-auto bskr-bg-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card.Img, {\n    variant: \"top\",\n    className: \"w-75 mx-auto rounded\",\n    src: curUser.profilePicUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(Card.Body, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Card.Text, {\n    className: \"text-white text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, curUser.location)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bskr-bg-secondary w-100 rounded p-4 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Bio\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, curUser.bio))), /*#__PURE__*/React.createElement(Col, {\n    lg: 5,\n    className: \"d-flex flex-column align-items-center justify-content-start mt-1 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }))) : null));\n};\n\nexport default UserProf;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/pages/UserProf/UserProf.js"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","useParams","useQuery","QUERY_USERS","updateUsers","idbPromise","Row","Col","Card","Spinner","Alert","UserProf","state","users","dispatch","id","curUser","setCurUser","showAlert","setShowAlert","loading","data","length","find","user","_id","forEach","then","indexedUsers","width","height","margin","marginTop","display","username","profilePicUrl","location","bio"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport { QUERY_USERS } from '../../utils/queries'\r\nimport { updateUsers } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers'\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nimport './UserProf.css'\r\n\r\nconst UserProf = () => {\r\n\t// cache redux store\r\n\tconst state = useSelector((state) => state)\r\n\t// destructure required variable\r\n\tconst { users } = state\r\n\t// cache redux method to update store\r\n\tconst dispatch = useDispatch()\r\n\r\n\t// get user id from url which was appended by Link\r\n\tconst { id } = useParams()\r\n\r\n\t// initiate component level state to keep track of current user\r\n\tconst [ curUser, setCurUser ] = useState({})\r\n\r\n\tconst [ showAlert, setShowAlert ] = useState(false)\r\n\r\n\t// make db query to get all users, in case page is refreshed or user has not first visited landing page to initiate redux store from db\r\n\tconst { loading, data } = useQuery(QUERY_USERS)\r\n\r\n\t// this will be called after initial render and each time one of the values in the dependency array (users, data, loading, dispatch, id, curUser) changes. checking the redux store first\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if users are already in global store\r\n\t\t\tif (users.length) {\r\n\t\t\t\t// update component level state of curUser to be the user object from the redux store whose id matches the one from the url\r\n\t\t\t\tsetCurUser(users.find((user) => user._id === id))\r\n\t\t\t} else if (data) {\r\n\t\t\t\t// if nothing was in global store, if there is any data retrieved from db on server, dispatch the action to update the users in the global store with the data from the db\r\n\t\t\t\tdispatch(updateUsers(data.users))\r\n\t\t\t\t// also, cache the products from the db in indexedDb\r\n\t\t\t\tdata.users.forEach((user) => {\r\n\t\t\t\t\tidbPromise('users', 'put', user)\r\n\t\t\t\t})\r\n\t\t\t} else if (!loading) {\r\n\t\t\t\t// otherwise, if there is nothing in the redux store, and there is no internet connection (hence 'loading' is undefined in the useQuery() hook) get all the data from the cache in idb\r\n\t\t\t\tidbPromise('users', 'get').then((indexedUsers) => {\r\n\t\t\t\t\t// use data from indexedDb to update redux global store for offline browsing\r\n\t\t\t\t\tdispatch(updateUsers(indexedUsers))\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ users, data, loading, dispatch, id ]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading ? (\r\n\t\t\t\t<Spinner\r\n\t\t\t\t\tanimation='border'\r\n\t\t\t\t\trole='status'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth     : '75px',\r\n\t\t\t\t\t\theight    : '75px',\r\n\t\t\t\t\t\tmargin    : 'auto',\r\n\t\t\t\t\t\tmarginTop : '6rem',\r\n\t\t\t\t\t\tdisplay   : 'block'\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className='sr-only'>Loading...</span>\r\n\t\t\t\t</Spinner>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{curUser ? (\r\n\t\t\t\t\t\t<div className='UserProf vh-100'>\r\n\t\t\t\t\t\t\t<h1 className='w-100 my-5 text-center'>{curUser.username}</h1>\r\n\t\t\t\t\t\t\t<Row className='d-flex justify-content-center '>\r\n\t\t\t\t\t\t\t\t<Col\r\n\t\t\t\t\t\t\t\t\tlg={5}\r\n\t\t\t\t\t\t\t\t\tclassName='d-flex flex-column justify-content-start align-items-start mt-1 mb-2'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className='w-100 bskr-bg-secondary pt-2 mt-1 mb-3 rounded'>\r\n\t\t\t\t\t\t\t\t\t\t<Card className='w-75 mx-auto bskr-bg-secondary'>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card.Img\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant='top'\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='w-75 mx-auto rounded'\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={curUser.profilePicUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card.Body className='text-center'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Text className='text-white text-center'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{curUser.location}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className='bskr-bg-secondary w-100 rounded p-4 text-center'>\r\n\t\t\t\t\t\t\t\t\t\t<h5 className='text-dark'>Bio</h5>\r\n\t\t\t\t\t\t\t\t\t\t<p className='text-left'>{curUser.bio}</p>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col\r\n\t\t\t\t\t\t\t\t\tlg={5}\r\n\t\t\t\t\t\t\t\t\tclassName='d-flex flex-column align-items-center justify-content-start mt-1 mb-3'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default UserProf"]},"metadata":{},"sourceType":"module"}