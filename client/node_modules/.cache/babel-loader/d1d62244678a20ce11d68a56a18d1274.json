{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\components\\\\VideoGrid\\\\VideoGrid.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_VIDEOS } from '../../utils/queries';\nimport { updateVideos } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport VideoTile from '../VideoTile/VideoTile';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './VideoGrid.css';\n\nconst VideoGrid = () => {\n  // query db for videos\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_VIDEOS);\n  const {\n    videos,\n    currentGenre\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // store it in the global state object\n      dispatch(updateVideos(data.videos)); // // also take each video and save it to the IndexedDB using the helper function\n\n      data.videos.forEach(video => {\n        idbPromise('videos', 'put', video);\n      }); // add else if to check if 'loading' is undefined in 'useQuery()' hook. ie no internet connection to server\n    } else if (!loading) {\n      // since we're offline, get all of the data from the 'videos' store\n      idbPromise('videos', 'get').then(videos => {\n        // use retrieved data to set global state for offline browsing\n        dispatch(updateVideos(videos));\n      });\n      console.log('you are offline');\n    }\n  }, [data, loading, dispatch]);\n\n  function filterVideos() {\n    // filter out videos who have not posted a song.  **keep in place until we refactor User from Video models\n    //const actualVideos = videos.filter((video) => video.songs.length > 0)\n    const actualVideos = videos; //temp measure to remove now useless original filter\n    // if (!currentGenre) {\n    // \treturn videos;\n    // }\n    // ** ditto\n\n    if (!currentGenre) {\n      return actualVideos;\n    } // we have an array of videos.  each video has an array of genres.  we need to return a new array of videos, based on their array of genres containing a certain value (currentGenre which is the genre's _id)\n    // return videos.filter((video) =>\n    // \tvideo.genres.some((genre) => genre._id === currentGenre)\n    // );\n    // ** ditto\n\n\n    return actualVideos.filter(video => video.genres.some(genre => genre._id === currentGenre));\n  }\n\n  return /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"VideoGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    style: {\n      width: '100px',\n      height: '100px',\n      margin: 'auto',\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 6\n    }\n  }, \"Loading...\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"VideoGrid-tiles-container d-flex justify-content-center flex-wrap mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, videos.length ? filterVideos().map(video => /*#__PURE__*/React.createElement(VideoTile, Object.assign({}, video, {\n    key: video._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 8\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"No Videos yet...\")));\n};\n\nexport default VideoGrid;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/components/VideoGrid/VideoGrid.js"],"names":["React","useEffect","useSelector","useDispatch","useQuery","QUERY_VIDEOS","updateVideos","idbPromise","VideoTile","Col","Spinner","VideoGrid","loading","data","videos","currentGenre","state","dispatch","forEach","video","then","console","log","filterVideos","actualVideos","filter","genres","some","genre","_id","width","height","margin","display","length","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACvB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBT,QAAQ,CAACC,YAAD,CAAlC;AAEA,QAAM;AAAES,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA2Bb,WAAW,CAAEc,KAAD,IAAWA,KAAZ,CAA5C;AAEA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CACR,MAAM;AACL;AACA,QAAIY,IAAJ,EAAU;AACT;AACAI,MAAAA,QAAQ,CAACX,YAAY,CAACO,IAAI,CAACC,MAAN,CAAb,CAAR,CAFS,CAIT;;AACAD,MAAAA,IAAI,CAACC,MAAL,CAAYI,OAAZ,CAAqBC,KAAD,IAAW;AAC9BZ,QAAAA,UAAU,CAAC,QAAD,EAAW,KAAX,EAAkBY,KAAlB,CAAV;AACA,OAFD,EALS,CAQT;AACA,KATD,MASO,IAAI,CAACP,OAAL,EAAc;AACpB;AACAL,MAAAA,UAAU,CAAC,QAAD,EAAW,KAAX,CAAV,CAA4Ba,IAA5B,CAAkCN,MAAD,IAAY;AAC5C;AACAG,QAAAA,QAAQ,CAACX,YAAY,CAACQ,MAAD,CAAb,CAAR;AACA,OAHD;AAIAO,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AACD,GApBO,EAqBR,CAAET,IAAF,EAAQD,OAAR,EAAiBK,QAAjB,CArBQ,CAAT;;AAwBA,WAASM,YAAT,GAAwB;AACvB;AACA;AACM,UAAMC,YAAY,GAAGV,MAArB,CAHiB,CAGY;AAEnC;AACA;AACA;AACA;;AACA,QAAI,CAACC,YAAL,EAAmB;AAClB,aAAOS,YAAP;AACA,KAXsB,CAavB;AAEA;AACA;AACA;AACA;;;AACA,WAAOA,YAAY,CAACC,MAAb,CAAqBN,KAAD,IAC1BA,KAAK,CAACO,MAAN,CAAaC,IAAb,CAAmBC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcd,YAA3C,CADM,CAAP;AAGA;;AAED,sBACC,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEH,OAAO,gBACP,oBAAC,OAAD;AACC,IAAA,SAAS,EAAC,QADX;AAEC,IAAA,IAAI,EAAC,QAFN;AAGC,IAAA,KAAK,EAAE;AAAEkB,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,MAAM,EAAE,OAA1B;AAAmCC,MAAAA,MAAM,EAAE,MAA3C;AAAmDC,MAAAA,OAAO,EAAE;AAA5D,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKC;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALD,CADO,gBASP;AAAK,IAAA,SAAS,EAAC,2EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEnB,MAAM,CAACoB,MAAP,GACAX,YAAY,GAAGY,GAAf,CAAoBhB,KAAD,iBAClB,oBAAC,SAAD,oBAAeA,KAAf;AAAsB,IAAA,GAAG,EAAEA,KAAK,CAACU,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADA,gBAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF,CAVF,CADD;AA8BA,CAtFD;;AAwFA,eAAelB,SAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport { QUERY_VIDEOS } from '../../utils/queries'\r\nimport { updateVideos } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers'\r\n\r\nimport VideoTile from '../VideoTile/VideoTile'\r\n\r\nimport Col from 'react-bootstrap/Col'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport './VideoGrid.css'\r\n\r\nconst VideoGrid = () => {\r\n\t// query db for videos\r\n\tconst { loading, data } = useQuery(QUERY_VIDEOS)\r\n\r\n\tconst { videos, currentGenre } = useSelector((state) => state)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if there's data to be stored\r\n\t\t\tif (data) {\r\n\t\t\t\t// store it in the global state object\r\n\t\t\t\tdispatch(updateVideos(data.videos))\r\n\r\n\t\t\t\t// // also take each video and save it to the IndexedDB using the helper function\r\n\t\t\t\tdata.videos.forEach((video) => {\r\n\t\t\t\t\tidbPromise('videos', 'put', video)\r\n\t\t\t\t})\r\n\t\t\t\t// add else if to check if 'loading' is undefined in 'useQuery()' hook. ie no internet connection to server\r\n\t\t\t} else if (!loading) {\r\n\t\t\t\t// since we're offline, get all of the data from the 'videos' store\r\n\t\t\t\tidbPromise('videos', 'get').then((videos) => {\r\n\t\t\t\t\t// use retrieved data to set global state for offline browsing\r\n\t\t\t\t\tdispatch(updateVideos(videos))\r\n\t\t\t\t})\r\n\t\t\t\tconsole.log('you are offline')\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ data, loading, dispatch ]\r\n\t)\r\n\r\n\tfunction filterVideos() {\r\n\t\t// filter out videos who have not posted a song.  **keep in place until we refactor User from Video models\r\n\t\t//const actualVideos = videos.filter((video) => video.songs.length > 0)\r\n        const actualVideos = videos; //temp measure to remove now useless original filter\r\n\r\n\t\t// if (!currentGenre) {\r\n\t\t// \treturn videos;\r\n\t\t// }\r\n\t\t// ** ditto\r\n\t\tif (!currentGenre) {\r\n\t\t\treturn actualVideos\r\n\t\t}\r\n\r\n\t\t// we have an array of videos.  each video has an array of genres.  we need to return a new array of videos, based on their array of genres containing a certain value (currentGenre which is the genre's _id)\r\n\r\n\t\t// return videos.filter((video) =>\r\n\t\t// \tvideo.genres.some((genre) => genre._id === currentGenre)\r\n\t\t// );\r\n\t\t// ** ditto\r\n\t\treturn actualVideos.filter((video) =>\r\n\t\t\tvideo.genres.some((genre) => genre._id === currentGenre)\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Col lg={12} className='VideoGrid'>\r\n\t\t\t{loading ? (\r\n\t\t\t\t<Spinner\r\n\t\t\t\t\tanimation='border'\r\n\t\t\t\t\trole='status'\r\n\t\t\t\t\tstyle={{ width: '100px', height: '100px', margin: 'auto', display: 'block' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className='sr-only'>Loading...</span>\r\n\t\t\t\t</Spinner>\r\n\t\t\t) : (\r\n\t\t\t\t<div className='VideoGrid-tiles-container d-flex justify-content-center flex-wrap mx-auto'>\r\n\t\t\t\t\t{videos.length ? (\r\n\t\t\t\t\t\tfilterVideos().map((video) => (\r\n\t\t\t\t\t\t\t<VideoTile {...video} key={video._id} />\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<h3>No Videos yet...</h3>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{/* <div className='VideoGrid-tiles-container d-flex justify-content-center flex-wrap mx-auto'>\r\n\t\t\t\t{videos.length ? (\r\n\t\t\t\t\tfilterVideos().map((video) => <VideoTile {...video} key={video._id} />)\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<h3>No Videos yet...</h3>\r\n\t\t\t\t)}\r\n\t\t\t</div> */}\r\n\t\t</Col>\r\n\t)\r\n}\r\n\r\nexport default VideoGrid"]},"metadata":{},"sourceType":"module"}