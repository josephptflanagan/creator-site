{"ast":null,"code":"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  getUserId() {\n    return localStorage.getItem('user_id');\n  }\n\n  login(userId, idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('user_id', userId);\n    localStorage.setItem('id_token', idToken);\n    window.location.assign(`/user/${userId}`);\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('user_id'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/utils/auth.js"],"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","getUserId","login","userId","idToken","setItem","window","location","assign","logout","removeItem"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;AACjBC,EAAAA,UAAU,GAAG;AACZ,WAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;AACA;;AAEDC,EAAAA,QAAQ,GAAG;AACV;AACA,UAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;AACA,WAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB;AACA;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACrB,QAAI;AACH,YAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;AACA,UAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACpC,eAAO,IAAP;AACA,OAFD,MAEO,OAAO,KAAP;AACP,KALD,CAKE,OAAOC,GAAP,EAAY;AACb,aAAO,KAAP;AACA;AACD;;AAEDR,EAAAA,QAAQ,GAAG;AACV;AACA,WAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACA;;AAEDC,EAAAA,SAAS,GAAG;AACX,WAAOF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAP;AACA;;AAEDE,EAAAA,KAAK,CAACC,MAAD,EAASC,OAAT,EAAkB;AACtB;AACAL,IAAAA,YAAY,CAACM,OAAb,CAAqB,SAArB,EAAgCF,MAAhC;AACAJ,IAAAA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AAEAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAwB,SAAQL,MAAO,EAAvC;AACA;;AAEDM,EAAAA,MAAM,GAAG;AACR;AACAV,IAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACAX,IAAAA,YAAY,CAACW,UAAb,CAAwB,SAAxB,EAHQ,CAIR;;AACAJ,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACA;;AA7CgB;;AAgDlB,eAAe,IAAIpB,WAAJ,EAAf","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n\tgetProfile() {\r\n\t\treturn decode(this.getToken());\r\n\t}\r\n\r\n\tloggedIn() {\r\n\t\t// Checks if there is a saved token and it's still valid\r\n\t\tconst token = this.getToken();\r\n\t\treturn !!token && !this.isTokenExpired(token);\r\n\t}\r\n\r\n\tisTokenExpired(token) {\r\n\t\ttry {\r\n\t\t\tconst decoded = decode(token);\r\n\t\t\tif (decoded.exp < Date.now() / 1000) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else return false;\r\n\t\t} catch (err) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tgetToken() {\r\n\t\t// Retrieves the user token from localStorage\r\n\t\treturn localStorage.getItem('id_token');\r\n\t}\r\n\r\n\tgetUserId() {\r\n\t\treturn localStorage.getItem('user_id');\r\n\t}\r\n\r\n\tlogin(userId, idToken) {\r\n\t\t// Saves user token to localStorage\r\n\t\tlocalStorage.setItem('user_id', userId);\r\n\t\tlocalStorage.setItem('id_token', idToken);\r\n\r\n\t\twindow.location.assign(`/user/${userId}`);\r\n\t}\r\n\r\n\tlogout() {\r\n\t\t// Clear user token and profile data from localStorage\r\n\t\tlocalStorage.removeItem('id_token');\r\n\t\tlocalStorage.removeItem('user_id');\r\n\t\t// this will reload the page and reset the state of the application\r\n\t\twindow.location.assign('/');\r\n\t}\r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}