{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\components\\\\EditVideoGenres\\\\EditGenres.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useToggle } from '../../hooks';\nimport { QUERY_VIDEO_GENRES } from '../../utils/queries';\nimport { UPDATE_VIDEO_GENRES } from '../../utils/mutations';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport './EditGenres.css'; // destructure genre objects of current video from props\n\nconst EditGenres = ({\n  curGenres\n}) => {\n  var _allGenres$genres;\n\n  // MODAL TOGGLE\n  const [show, toggleShow] = useToggle(false);\n  const [allGenres, setAllGenres] = useState([]); // map an array of the ids of current genres to set defaultChecked of checkboxes for matched ids\n\n  const curGenresIds = curGenres === null || curGenres === void 0 ? void 0 : curGenres.map(genre => genre._id); // query to get all genres\n\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_VIDEO_GENRES); // initialize mutation function to update video genres\n\n  const [updateVideoGenres] = useMutation(UPDATE_VIDEO_GENRES); // update component state when data arrives from db query\n\n  useEffect(() => {\n    if (data) {\n      setAllGenres(data);\n    }\n  }, [data, loading]); // MODAL FUNCTIONALITY\n\n  const handleClose = () => toggleShow();\n\n  const handleShow = () => toggleShow(); // call mutation function with array of updated genre id's\n\n\n  const handleFormSubmit = async e => {\n    e.preventDefault(); // close modal\n\n    handleClose(); // array-like iterable (RadioNodeList) of all checkbox els\n\n    const genres = e.target.elements['updatedGenres']; // initialize array of updated genres\n\n    let updatedGenres = []; // iterate over RadioNodeList and push the value (genre name) of each checked box into the array\n\n    for (let i = 0; i < genres.length; i++) {\n      genres[i].checked && updatedGenres.push(genres[i].value);\n    }\n\n    try {\n      const mutationResponse = await updateVideoGenres({\n        variables: {\n          genres: updatedGenres\n        }\n      });\n      console.log('mutationResponse', mutationResponse); // window.location.reload()\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, allGenres ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: \"w-50 btn-sm bskr-btn-purple\",\n    variant: \"primary\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 6\n    }\n  }, \"Genres\"), /*#__PURE__*/React.createElement(Modal, {\n    className: \"EditGenresModal\",\n    centered: true,\n    show: show,\n    onHide: handleClose,\n    animation: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 8\n    }\n  }, \"Pick the Video's Genres\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, (_allGenres$genres = allGenres.genres) === null || _allGenres$genres === void 0 ? void 0 : _allGenres$genres.map(genre => /*#__PURE__*/React.createElement(\"div\", {\n    key: genre._id,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    // type=\"checkbox\"\n    disabled: genre.genreName === 'All',\n    genreName: \"updatedGenres\",\n    label: genre.genreName,\n    value: genre._id,\n    defaultChecked: curGenresIds === null || curGenresIds === void 0 ? void 0 : curGenresIds.includes(genre._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary btn-sm bskr-btn-purple\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"save\"))))) : null);\n};\n\nexport default EditGenres;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/components/EditVideoGenres/EditGenres.js"],"names":["React","useState","useEffect","useMutation","useQuery","useToggle","QUERY_VIDEO_GENRES","UPDATE_VIDEO_GENRES","Modal","Button","Form","EditGenres","curGenres","show","toggleShow","allGenres","setAllGenres","curGenresIds","map","genre","_id","loading","data","updateVideoGenres","handleClose","handleShow","handleFormSubmit","e","preventDefault","genres","target","elements","updatedGenres","i","length","checked","push","value","mutationResponse","variables","console","log","err","error","genreName","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\n\r\nimport { useToggle } from '../../hooks'\r\nimport { QUERY_VIDEO_GENRES } from '../../utils/queries';\r\nimport { UPDATE_VIDEO_GENRES } from '../../utils/mutations';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport './EditGenres.css';\r\n\r\n// destructure genre objects of current video from props\r\nconst EditGenres = ({ curGenres }) => {\r\n  // MODAL TOGGLE\r\n  const [ show, toggleShow ] = useToggle(false);\r\n\r\n\tconst [ allGenres, setAllGenres ] = useState([]);\r\n\r\n\t// map an array of the ids of current genres to set defaultChecked of checkboxes for matched ids\r\n\tconst curGenresIds = curGenres?.map(genre => genre._id);\r\n\r\n  // query to get all genres\r\n\tconst { loading, data } = useQuery(QUERY_VIDEO_GENRES);\r\n\r\n  // initialize mutation function to update video genres\r\n\tconst [ updateVideoGenres ] = useMutation(UPDATE_VIDEO_GENRES);\r\n\r\n  // update component state when data arrives from db query\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (data) {\r\n\t\t\t\tsetAllGenres(data);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ data, loading ]\r\n\t);\r\n\r\n\t// MODAL FUNCTIONALITY\r\n\tconst handleClose = () => toggleShow();\r\n\tconst handleShow = () => toggleShow();\r\n\r\n  // call mutation function with array of updated genre id's\r\n\tconst handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // close modal\r\n\t\thandleClose();\r\n\t\t// array-like iterable (RadioNodeList) of all checkbox els\r\n\t\tconst genres = e.target.elements['updatedGenres'];\r\n\t\t// initialize array of updated genres\r\n\t\tlet updatedGenres = [];\r\n\t\t// iterate over RadioNodeList and push the value (genre name) of each checked box into the array\r\n\t\tfor (let i = 0; i < genres.length; i++) {\r\n\t\t\tgenres[i].checked && updatedGenres.push(genres[i].value);\r\n\t\t}\r\n\r\n    try {\r\n      const mutationResponse = await updateVideoGenres({\r\n        variables : {\r\n          genres : updatedGenres\r\n        }\r\n\t\t\t});\r\n      console.log('mutationResponse', mutationResponse);\r\n\r\n\t\t\t// window.location.reload()\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}    \r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{allGenres ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName=\"w-50 btn-sm bskr-btn-purple\"\r\n\t\t\t\t\t\tvariant=\"primary\"\r\n\t\t\t\t\t\tonClick={handleShow}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tGenres\r\n\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t<Modal\r\n\t\t\t\t\t\tclassName=\"EditGenresModal\"\r\n\t\t\t\t\t\tcentered\r\n\t\t\t\t\t\tshow={show}\r\n\t\t\t\t\t\tonHide={handleClose}\r\n\t\t\t\t\t\tanimation={false}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t\t\t<Modal.Title>Pick the Video's Genres</Modal.Title>\r\n\t\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t\t<Form onSubmit={handleFormSubmit}>\r\n\t\t\t\t\t\t\t\t<Form.Group>\r\n                  {/* All is included until refactor of All filter on CreatrGrid */}\r\n\t\t\t\t\t\t\t\t\t{allGenres.genres?.map((genre) => (\r\n\t\t\t\t\t\t\t\t\t<div key={genre._id} className=\"mb-3\">\r\n\t\t\t\t\t\t\t\t\t\t<Form.Check\r\n                      // type=\"checkbox\"\r\n                      disabled={genre.genreName === 'All'}\r\n\t\t\t\t\t\t\t\t\t\t\tgenreName=\"updatedGenres\"\r\n\t\t\t\t\t\t\t\t\t\t\tlabel={genre.genreName}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={genre._id}\r\n\t\t\t\t\t\t\t\t\t\t\tdefaultChecked={curGenresIds?.includes(genre._id)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"primary btn-sm bskr-btn-purple\"\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tsave\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t</>\r\n\t\t\t) : null}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default EditGenres;"]},"metadata":{},"sourceType":"module"}