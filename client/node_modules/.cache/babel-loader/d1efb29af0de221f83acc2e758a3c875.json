{"ast":null,"code":"export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nexport function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database 'creator' with the version of 1\n    const request = window.indexedDB.open('creator', 1); // create variables to hold reference to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set 'primary' key index to be the '_id' of the data\n\n      db.createObjectStore('videos', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('genres', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('games', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('tags', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('users', {\n        keyPath: '_id'\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    }; // on database open success\n\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the 'db' variable\n      db = request.result; // open a transaction to whatever we pass into 'storeName' (must match one of the object store names)\n\n      tx = db.transaction(storeName, 'readwrite'); // save a reference to that object store\n\n      store = tx.objectStore(storeName); // if there's any  errors, let us know\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n\n          break;\n\n        case 'delete':\n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      } // when the transaction is complete, close the connection\n\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/utils/helpers.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","validateEmail","email","re","test","String","toLowerCase","pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"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","sourcesContent":["export function capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n  \r\n  export function validateEmail(email) {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  export function pluralize(name, count) {\r\n    if (count === 1) {\r\n      return name;\r\n    }\r\n    return name + 's';\r\n  }\r\n  \r\n  export function idbPromise(storeName, method, object) {\r\n    return new Promise((resolve, reject) => {\r\n      // open connection to the database 'creator' with the version of 1\r\n      const request = window.indexedDB.open('creator', 1);\r\n  \r\n      // create variables to hold reference to the database, transaction (tx), and object store\r\n      let db, tx, store;\r\n  \r\n      // if version has changed (or if this is the first time using the database), run this method and create the three object stores\r\n      request.onupgradeneeded = function(e) {\r\n        const db = request.result;\r\n        // create object store for each type of data and set 'primary' key index to be the '_id' of the data\r\n        db.createObjectStore('videos', { keyPath: '_id' });\r\n        db.createObjectStore('genres', { keyPath: '_id' });\r\n        db.createObjectStore('games', { keyPath: '_id' });        \r\n        db.createObjectStore('tags', { keyPath: '_id' });\r\n        db.createObjectStore('users', { keyPath: '_id' });\r\n      };\r\n  \r\n      // handle any errors with connecting\r\n      request.onerror = function(e) {\r\n        console.log('There was an error');\r\n      };\r\n  \r\n      // on database open success\r\n      request.onsuccess = function(e) {\r\n        // save a reference of the database to the 'db' variable\r\n        db = request.result;\r\n        // open a transaction to whatever we pass into 'storeName' (must match one of the object store names)\r\n        tx = db.transaction(storeName, 'readwrite');\r\n        // save a reference to that object store\r\n        store = tx.objectStore(storeName);\r\n  \r\n        // if there's any  errors, let us know\r\n        db.onerror = function(e) {\r\n          console.log('error', e);\r\n        };\r\n  \r\n        switch (method) {\r\n          case 'put':\r\n            store.put(object);\r\n            resolve(object);\r\n            break;\r\n          case 'get':\r\n            const all = store.getAll();\r\n            all.onsuccess = function() {\r\n              resolve(all.result);\r\n            };\r\n            break;\r\n          case 'delete':\r\n            store.delete(object._id);\r\n            break;\r\n          default:\r\n            console.log('No valid method');\r\n            break;\r\n        }\r\n  \r\n        // when the transaction is complete, close the connection\r\n        tx.oncomplete = function() {\r\n          db.close();\r\n        };\r\n      };\r\n    });\r\n  }"]},"metadata":{},"sourceType":"module"}