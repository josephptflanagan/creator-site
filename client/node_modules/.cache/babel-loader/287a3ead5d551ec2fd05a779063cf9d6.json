{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\components\\\\GameMenu\\\\GameMenu.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_VIDEO_GAMES } from '../../utils/queries';\nimport { hydrateGames } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport GameBtn from '../GameBtn/GameBtn';\nimport './GameMenu.css';\n\nconst GameMenu = () => {\n  // get data from DB with Apollo\n  const {\n    loading,\n    data: gameData\n  } = useQuery(QUERY_VIDEO_GAMES);\n  const {\n    games\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if gameData exists or has changed from the response of useQuery, then run dispatch()\n    if (gameData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for games to\n      dispatch(hydrateGames(gameData.games)); // also write to IndexedDB\n\n      gameData.games.forEach(game => {\n        idbPromise('games', 'put', game);\n      }); // if app can't communicate with server, get games from indexedDB\n    } else if (!loading) {\n      idbPromise('games', 'get').then(games => {\n        dispatch(hydrateGames(games));\n      });\n    }\n  }, [gameData, loading, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GameMenu m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 6\n    }\n  }, \"Sort by game\"), games.map(game => /*#__PURE__*/React.createElement(GameBtn, {\n    key: game._id,\n    game: game,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 27\n    }\n  }))));\n};\n\nexport default GameMenu;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/components/GameMenu/GameMenu.js"],"names":["React","useEffect","useSelector","useDispatch","useQuery","QUERY_VIDEO_GAMES","hydrateGames","idbPromise","GameBtn","GameMenu","loading","data","gameData","games","state","dispatch","forEach","game","then","map","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAO,gBAAP;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACtB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAA8BR,QAAQ,CAACC,iBAAD,CAA5C;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAYX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAA7B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CACR,MAAM;AACL;AACA,QAAIW,QAAJ,EAAc;AACb;AACAG,MAAAA,QAAQ,CAACT,YAAY,CAACM,QAAQ,CAACC,KAAV,CAAb,CAAR,CAFa,CAGb;;AACAD,MAAAA,QAAQ,CAACC,KAAT,CAAeG,OAAf,CAAwBC,IAAD,IAAU;AAChCV,QAAAA,UAAU,CAAC,OAAD,EAAU,KAAV,EAAiBU,IAAjB,CAAV;AACA,OAFD,EAJa,CAOb;AACA,KARD,MAQO,IAAI,CAACP,OAAL,EAAc;AACpBH,MAAAA,UAAU,CAAC,OAAD,EAAU,KAAV,CAAV,CAA2BW,IAA3B,CAAiCL,KAAD,IAAW;AAC1CE,QAAAA,QAAQ,CAACT,YAAY,CAACO,KAAD,CAAb,CAAR;AACA,OAFD;AAGA;AACD,GAhBO,EAiBR,CAAED,QAAF,EAAYF,OAAZ,EAAqBK,QAArB,CAjBQ,CAAT;AAoBA,sBACC,0CACEL,OAAO,GAAG,IAAH,gBACP;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,EAEEG,KAAK,CAACM,GAAN,CAAWF,IAAD,iBAAU,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,IAAI,CAACG,GAAnB;AAAwB,IAAA,IAAI,EAAEH,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,CAFF,CAFF,CADD;AAUA,CArCD;;AAuCA,eAAeR,QAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { QUERY_VIDEO_GAMES } from '../../utils/queries'\r\nimport { hydrateGames } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers'\r\n\r\nimport GameBtn from '../GameBtn/GameBtn'\r\n\r\nimport './GameMenu.css'\r\n\r\nconst GameMenu = () => {\r\n\t// get data from DB with Apollo\r\n\tconst { loading, data: gameData } = useQuery(QUERY_VIDEO_GAMES)\r\n\r\n\tconst { games } = useSelector((state) => state)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if gameData exists or has changed from the response of useQuery, then run dispatch()\r\n\t\t\tif (gameData) {\r\n\t\t\t\t// execute our dispatch function with our action object indicating the type of action and the data to set our state for games to\r\n\t\t\t\tdispatch(hydrateGames(gameData.games))\r\n\t\t\t\t// also write to IndexedDB\r\n\t\t\t\tgameData.games.forEach((game) => {\r\n\t\t\t\t\tidbPromise('games', 'put', game)\r\n\t\t\t\t})\r\n\t\t\t\t// if app can't communicate with server, get games from indexedDB\r\n\t\t\t} else if (!loading) {\r\n\t\t\t\tidbPromise('games', 'get').then((games) => {\r\n\t\t\t\t\tdispatch(hydrateGames(games))\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ gameData, loading, dispatch ]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading ? null : (\r\n\t\t\t\t<div className='GameMenu m-2'>\r\n\t\t\t\t\t<h5 className='text-center'>Sort by game</h5>\r\n\t\t\t\t\t{games.map((game) => <GameBtn key={game._id} game={game} />)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GameMenu"]},"metadata":{},"sourceType":"module"}