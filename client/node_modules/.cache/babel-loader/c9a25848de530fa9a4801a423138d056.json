{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\components\\\\GenreMenu\\\\GenreMenu.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_VIDEO_GENRES } from '../../utils/queries';\nimport { hydrateGenres } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport GenreBtn from '../GenreBtn/GenreBtn';\nimport './GenreMenu.css';\n\nconst GenreMenu = () => {\n  // get data from DB with Apollo\n  const {\n    loading,\n    data: genreData\n  } = useQuery(QUERY_VIDEO_GENRES);\n  const {\n    genres\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if genreData exists or has changed from the response of useQuery, then run dispatch()\n    if (genreData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for genres to\n      dispatch(hydrateGenres(genreData.genres)); // also write to IndexedDB\n\n      genreData.genres.forEach(genre => {\n        idbPromise('genres', 'put', genre);\n      }); // if app can't communicate with server, get genres from indexedDB\n    } else if (!loading) {\n      idbPromise('genres', 'get').then(genres => {\n        dispatch(hydrateGenres(genres));\n      });\n    }\n  }, [genreData, loading, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GenreMenu m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 6\n    }\n  }, \"Sort by genre\"), genres.map(genre => /*#__PURE__*/React.createElement(GenreBtn, {\n    key: genre._id,\n    genre: genre,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }\n  }))));\n};\n\nexport default GenreMenu;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/components/GenreMenu/GenreMenu.js"],"names":["React","useEffect","useSelector","useDispatch","useQuery","QUERY_VIDEO_GENRES","hydrateGenres","idbPromise","GenreBtn","GenreMenu","loading","data","genreData","genres","state","dispatch","forEach","genre","then","map","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,OAAO,iBAAP;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACvB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAA+BR,QAAQ,CAACC,kBAAD,CAA7C;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAaX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAA9B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CACR,MAAM;AACL;AACA,QAAIW,SAAJ,EAAe;AACd;AACAG,MAAAA,QAAQ,CAACT,aAAa,CAACM,SAAS,CAACC,MAAX,CAAd,CAAR,CAFc,CAGd;;AACAD,MAAAA,SAAS,CAACC,MAAV,CAAiBG,OAAjB,CAA0BC,KAAD,IAAW;AACnCV,QAAAA,UAAU,CAAC,QAAD,EAAW,KAAX,EAAkBU,KAAlB,CAAV;AACA,OAFD,EAJc,CAOd;AACA,KARD,MAQO,IAAI,CAACP,OAAL,EAAc;AACpBH,MAAAA,UAAU,CAAC,QAAD,EAAW,KAAX,CAAV,CAA4BW,IAA5B,CAAkCL,MAAD,IAAY;AAC5CE,QAAAA,QAAQ,CAACT,aAAa,CAACO,MAAD,CAAd,CAAR;AACA,OAFD;AAGA;AACD,GAhBO,EAiBR,CAAED,SAAF,EAAaF,OAAb,EAAsBK,QAAtB,CAjBQ,CAAT;AAoBA,sBACC,0CACEL,OAAO,GAAG,IAAH,gBACP;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,EAEEG,MAAM,CAACM,GAAP,CAAYF,KAAD,iBAAW,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,KAAK,CAACG,GAArB;AAA0B,IAAA,KAAK,EAAEH,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtB,CAFF,CAFF,CADD;AAUA,CArCD;;AAuCA,eAAeR,SAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { QUERY_VIDEO_GENRES } from '../../utils/queries'\r\nimport { hydrateGenres } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers'\r\n\r\nimport GenreBtn from '../GenreBtn/GenreBtn'\r\n\r\nimport './GenreMenu.css'\r\n\r\nconst GenreMenu = () => {\r\n\t// get data from DB with Apollo\r\n\tconst { loading, data: genreData } = useQuery(QUERY_VIDEO_GENRES)\r\n\r\n\tconst { genres } = useSelector((state) => state)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if genreData exists or has changed from the response of useQuery, then run dispatch()\r\n\t\t\tif (genreData) {\r\n\t\t\t\t// execute our dispatch function with our action object indicating the type of action and the data to set our state for genres to\r\n\t\t\t\tdispatch(hydrateGenres(genreData.genres))\r\n\t\t\t\t// also write to IndexedDB\r\n\t\t\t\tgenreData.genres.forEach((genre) => {\r\n\t\t\t\t\tidbPromise('genres', 'put', genre)\r\n\t\t\t\t})\r\n\t\t\t\t// if app can't communicate with server, get genres from indexedDB\r\n\t\t\t} else if (!loading) {\r\n\t\t\t\tidbPromise('genres', 'get').then((genres) => {\r\n\t\t\t\t\tdispatch(hydrateGenres(genres))\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ genreData, loading, dispatch ]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading ? null : (\r\n\t\t\t\t<div className='GenreMenu m-2'>\r\n\t\t\t\t\t<h5 className='text-center'>Sort by genre</h5>\r\n\t\t\t\t\t{genres.map((genre) => <GenreBtn key={genre._id} genre={genre} />)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GenreMenu"]},"metadata":{},"sourceType":"module"}