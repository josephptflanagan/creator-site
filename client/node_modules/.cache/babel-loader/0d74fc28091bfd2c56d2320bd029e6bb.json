{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jflanagan.NIECE\\\\Desktop\\\\other\\\\creator-site\\\\client\\\\src\\\\components\\\\TagMenu\\\\TagMenu.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_VIDEO_TAGS } from '../../utils/queries';\nimport { hydrateTags } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport TagBtn from '../TagBtn/TagBtn';\nimport './TagMenu.css';\n\nconst TagMenu = () => {\n  // get data from DB with Apollo\n  const {\n    loading,\n    data: tagData\n  } = useQuery(QUERY_VIDEO_TAGS);\n  const {\n    tags\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // if tagData exists or has changed from the response of useQuery, then run dispatch()\n    if (tagData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for tags to\n      dispatch(hydrateTags(tagData.tags)); // also write to IndexedDB\n\n      tagData.tags.forEach(tag => {\n        idbPromise('tags', 'put', tag);\n      }); // if app can't communicate with server, get tags from indexedDB\n    } else if (!loading) {\n      idbPromise('tags', 'get').then(tags => {\n        dispatch(hydrateTags(tags));\n      });\n    }\n  }, [tagData, loading, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TagMenu m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 6\n    }\n  }, \"Sort by tag\"), tags.map(tag => /*#__PURE__*/React.createElement(TagBtn, {\n    key: tag._id,\n    tag: tag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default TagMenu;","map":{"version":3,"sources":["C:/Users/jflanagan.NIECE/Desktop/other/creator-site/client/src/components/TagMenu/TagMenu.js"],"names":["React","useEffect","useSelector","useDispatch","useQuery","QUERY_VIDEO_TAGS","hydrateTags","idbPromise","TagBtn","TagMenu","loading","data","tagData","tags","state","dispatch","forEach","tag","then","map","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,OAAO,eAAP;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACrB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAA6BR,QAAQ,CAACC,gBAAD,CAA3C;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAWX,WAAW,CAAEY,KAAD,IAAWA,KAAZ,CAA5B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CACR,MAAM;AACL;AACA,QAAIW,OAAJ,EAAa;AACZ;AACAG,MAAAA,QAAQ,CAACT,WAAW,CAACM,OAAO,CAACC,IAAT,CAAZ,CAAR,CAFY,CAGZ;;AACAD,MAAAA,OAAO,CAACC,IAAR,CAAaG,OAAb,CAAsBC,GAAD,IAAS;AAC7BV,QAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgBU,GAAhB,CAAV;AACA,OAFD,EAJY,CAOZ;AACA,KARD,MAQO,IAAI,CAACP,OAAL,EAAc;AACpBH,MAAAA,UAAU,CAAC,MAAD,EAAS,KAAT,CAAV,CAA0BW,IAA1B,CAAgCL,IAAD,IAAU;AACxCE,QAAAA,QAAQ,CAACT,WAAW,CAACO,IAAD,CAAZ,CAAR;AACA,OAFD;AAGA;AACD,GAhBO,EAiBR,CAAED,OAAF,EAAWF,OAAX,EAAoBK,QAApB,CAjBQ,CAAT;AAoBA,sBACC,0CACEL,OAAO,GAAG,IAAH,gBACP;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,EAEEG,IAAI,CAACM,GAAL,CAAUF,GAAD,iBAAS,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,GAAG,CAACG,GAAjB;AAAsB,IAAA,GAAG,EAAEH,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,CAFF,CAFF,CADD;AAUA,CArCD;;AAuCA,eAAeR,OAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { QUERY_VIDEO_TAGS } from '../../utils/queries'\r\nimport { hydrateTags } from '../../utils/actions'\r\nimport { idbPromise } from '../../utils/helpers'\r\n\r\nimport TagBtn from '../TagBtn/TagBtn'\r\n\r\nimport './TagMenu.css'\r\n\r\nconst TagMenu = () => {\r\n\t// get data from DB with Apollo\r\n\tconst { loading, data: tagData } = useQuery(QUERY_VIDEO_TAGS)\r\n\r\n\tconst { tags } = useSelector((state) => state)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// if tagData exists or has changed from the response of useQuery, then run dispatch()\r\n\t\t\tif (tagData) {\r\n\t\t\t\t// execute our dispatch function with our action object indicating the type of action and the data to set our state for tags to\r\n\t\t\t\tdispatch(hydrateTags(tagData.tags))\r\n\t\t\t\t// also write to IndexedDB\r\n\t\t\t\ttagData.tags.forEach((tag) => {\r\n\t\t\t\t\tidbPromise('tags', 'put', tag)\r\n\t\t\t\t})\r\n\t\t\t\t// if app can't communicate with server, get tags from indexedDB\r\n\t\t\t} else if (!loading) {\r\n\t\t\t\tidbPromise('tags', 'get').then((tags) => {\r\n\t\t\t\t\tdispatch(hydrateTags(tags))\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ tagData, loading, dispatch ]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading ? null : (\r\n\t\t\t\t<div className='TagMenu m-2'>\r\n\t\t\t\t\t<h5 className='text-center'>Sort by tag</h5>\r\n\t\t\t\t\t{tags.map((tag) => <TagBtn key={tag._id} tag={tag} />)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default TagMenu"]},"metadata":{},"sourceType":"module"}